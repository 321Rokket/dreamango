name: Dreamcatchr CI/CD

on:
  push:
    branches: [ "main", "staging", "develop" ]
  pull_request:
    branches: [ "main", "staging", "develop" ]

# Enterprise CI/CD Pipeline:
# 1. Code Quality & Security Checks
# 2. Unit Tests in Isolated Containers  
# 3. Integration Tests with Full Stack
# 4. Security Scanning & Dependency Audit
# 5. Build & Push Images (only on success)
# 6. Deploy to Staging (staging branch)
# 7. Deploy to Production (main branch, with approval)

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  BACKEND_SERVICE: dreamango-backend
  FRONTEND_SERVICE: dreamango-frontend

jobs:
  # Phase 1: Code Quality & Security
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install Backend Dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 bandit safety
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Backend Linting
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Backend Security Check
      run: |
        cd backend
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Frontend Linting
      run: |
        cd frontend
        npm run lint
    
    - name: Frontend Type Check
      run: |
        cd frontend
        npx tsc --noEmit

  # Phase 2: Unit Tests
  unit-tests:
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Run Backend Unit Tests
      run: |
        docker-compose --profile test build backend-test
        docker-compose --profile test up --abort-on-container-exit backend-test
    
    - name: Run Frontend Unit Tests  
      run: |
        docker-compose --profile test build frontend-test
        docker-compose --profile test up --abort-on-container-exit frontend-test
    
    - name: Upload Test Artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-logs
        path: test-logs/

  # Phase 3: Integration Tests
  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and Start Services
      run: |
        docker-compose up -d --build
        sleep 60  # Wait for services to be ready
    
    - name: Health Check Tests
      run: |
        curl -f http://localhost:80/ || exit 1
        docker exec dreamango-backend curl -f http://localhost:8000/health/ || exit 1
    
    - name: API Integration Tests
      run: |
        # Add actual API integration tests here
        docker exec dreamango-backend python manage.py test --pattern="*integration*" || true
    
    - name: Cleanup
      run: |
        docker-compose down -v

  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint with ESLint
      run: npm run lint
    
    - name: Run tests
      run: npm run test:ci
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        fail_ci_if_error: true

  security-scan:
    needs: [integration-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build-and-push:
    needs: [integration-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: |
      always() &&
      (needs.integration-tests.result == 'success') &&
      (needs.frontend-tests.result == 'success') &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker for GCP
      run: gcloud auth configure-docker
    
    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:latest
          gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}
    
    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}:latest
          gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}

  deploy-staging:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Deploy Backend to Cloud Run
      run: |
        gcloud run deploy ${{ env.BACKEND_SERVICE }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port=8000 \
          --set-env-vars="ENVIRONMENT=staging"
    
    - name: Deploy Frontend to Cloud Run
      run: |
        gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port=80 \
          --set-env-vars="ENVIRONMENT=staging,BACKEND_URL=https://${{ env.BACKEND_SERVICE }}-staging.run.app"

  deploy-production:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Deploy Backend to Cloud Run
      run: |
        gcloud run deploy ${{ env.BACKEND_SERVICE }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port=8000 \
          --set-env-vars="ENVIRONMENT=production"
    
    - name: Deploy Frontend to Cloud Run
      run: |
        gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port=80 \
          --set-env-vars="ENVIRONMENT=production,BACKEND_URL=https://${{ env.BACKEND_SERVICE }}.run.app"
